version: 2
defaults: &defaults
  working_directory: ~/build
  machine:
    image: ubuntu-2204:2024.05.1
  resource_class: large
  environment:
    RAILS_LOG_TO_STDOUT: false
    COVERAGE: true
    LOG_LEVEL: warn

jobs:
  build:
    <<: *defaults
    steps:
      - checkout

      # Install required dependencies manually since no Docker images are used
      - run:
          name: Install dependencies
          command: |
            sudo apt-get update
            DEBIAN_FRONTEND=noninteractive sudo apt-get install -y \
              libpq-dev \
              redis-server \
              postgresql \
              build-essential \
              git \
              curl \
              libssl-dev \
              zlib1g-dev \
              libreadline-dev \
              libyaml-dev \
              nodejs \
              npm \
              openjdk-11-jdk \
              jq

      # Set up RVM and install Ruby 3.3.3
      - run:
          name: Install RVM and Ruby 3.3.3
          command: |
            sudo apt-get install -y gpg
            gpg --keyserver hkp://keyserver.ubuntu.com --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB
            \curl -sSL https://get.rvm.io | bash -s stable
            source ~/.rvm/scripts/rvm
            rvm install "3.3.3"
            rvm use 3.3.3 --default
            gem install bundler

      # Check installed Ruby and Bundler versions
      - run:
          name: Check Ruby and Bundler Versions
          command: |
            source ~/.rvm/scripts/rvm
            ruby -v
            bundler -v

      # Run other necessary steps like `bundle install`, setting up the application, etc.
      - run:
          name: Install dependencies using Bundler
          command: |
            source ~/.rvm/scripts/rvm
            bundle install

      # Add other build, test, or deploy steps as required
      # Install nvm and use Node.js v20
      - run:
          name: Swap node versions
          command: |
            wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"
            nvm install 20
            echo 'export NVM_DIR="$HOME/.nvm"' >> $BASH_ENV
            echo '[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"' >> $BASH_ENV

      # Node.js package installation
      - run:
          name: Install pnpm and Node dependencies
          command: |
            which npm
            npm -v
            npm install -g pnpm

      - run:
          name: Verify pnpm Installation
          command: pnpm -v

      - run:
          name: Install Node.js dependencies
          command: pnpm install

      - run:
          name: Download cc-test-reporter
          command: |
            mkdir -p ~/tmp
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ~/tmp/cc-test-reporter
            chmod +x ~/tmp/cc-test-reporter

      # Swagger verification
      - run:
          name: Verify swagger API specification
          command: |
            bundle exec rake swagger:build
            if [[ `git status swagger/swagger.json --porcelain` ]]
            then
              echo "ERROR: The swagger.json file is not in sync with the yaml specification. Run 'rake swagger:build' and commit 'swagger/swagger.json'."
              exit 1
            fi
            curl -L https://repo1.maven.org/maven2/org/openapitools/openapi-generator-cli/6.3.0/openapi-generator-cli-6.3.0.jar > ~/tmp/openapi-generator-cli-6.3.0.jar
            java -jar ~/tmp/openapi-generator-cli-6.3.0.jar validate -i swagger/swagger.json

      # Database setup
      - run: sudo service postgresql start && bundle exec rake db:create
      - run: bundle exec rake db:schema:load

      # Bundle audit
      - run:
          name: Bundle audit
          command: bundle exec bundle audit update && bundle exec bundle audit check -v

      # Rubocop linting
      - run:
          name: Rubocop
          command: bundle exec rubocop

      # ESLint linting
      - run:
          name: eslint
          command: pnpm run eslint

      # Run frontend tests
      - run:
          name: Run frontend tests
          command: |
            mkdir -p ~/tmp/test-results/frontend_specs
            ~/tmp/cc-test-reporter before-build
            pnpm run test:coverage

      - run:
          name: Code Climate Test Coverage
          command: |
            ~/tmp/cc-test-reporter format-coverage -t lcov -o "coverage/codeclimate.frontend_$CIRCLE_NODE_INDEX.json"

      # Run backend tests
      - run:
          name: Run backend tests
          command: |
            mkdir -p ~/tmp/test-results/rspec
            mkdir -p ~/tmp/test-artifacts
            mkdir -p coverage
            ~/tmp/cc-test-reporter before-build
            TESTFILES=$(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)
            bundle exec rspec --format progress \
                              --format RspecJunitFormatter \
                              --out ~/tmp/test-results/rspec.xml \
                              -- ${TESTFILES}
          no_output_timeout: 30m

      - run:
          name: Code Climate Test Coverage
          command: |
            ~/tmp/cc-test-reporter format-coverage -t simplecov -o "coverage/codeclimate.$CIRCLE_NODE_INDEX.json"

      - persist_to_workspace:
          root: coverage
